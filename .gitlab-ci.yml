# Quich search:
# - 0-start-measure
# - 1-lint
# - 2-build
# - 3-test
# - 4-deploy
# - 5-emergency-only
# - 0-end-measure

default:
  image: fecton/diploma-ubuntu-runner-custom:0.0.6 # TODO: prepare docker image

variables:
  GIT_SSL_NO_VERIFY: "true"

include:
  - local: "cicd/1-linters/*.yaml"
  - local: "cicd/2-terraform/*.yaml"

stages:
- 0-start-measure
- 1-lint
- 2-build
- 3-test
- 4-deploy
- 5-emergency-only
- 0-end-measure

# ==================================
#         0-START-MEASURE
# ==================================
0-start-measure:
  stage: 0-start-measure
  artifacts:
    paths:
      - dynamic-global-variables.sh
  script: |
    export START_TIME=$(date +%s)
    echo "export START_TIME=$START_TIME" > dynamic-global-variables.sh

# ==================================
#             1-LINT
# ==================================
1-terraform-lint:
  stage: 1-lint
  script:
    - cd terraform/
    - terraform init -backend=false
    - terraform validate
    - terraform fmt -check

2-helm-lint:
  stage: 1-lint
  script:
    - cd helm-chart/
    - helm lint --strict

3-kustomize-lint:
  stage: 1-lint
  script:
    - cd kustomize/
    - kubectl kustomize .


# ==================================
#            2-BUILD
# ==================================
# 1-terraform-build:
#   when: manual # FIXME: enable later
#   stage: 2-build
#   script:
#     - echo "No implementation. Skipped."

2-helm-build:
  stage: 2-build
  script:
    - cd helm-chart/
    - helm template . > helm-template.yaml
    - cat helm-template.yaml
    - kustomize create --resources helm-template.yaml
    - kustomize build .

3-kustomize-build:
  stage: 2-build
  script:
    - cd kustomize/
    - kubectl kustomize .

4-docker-build:
  stage: 2-build
  image: quay.io/buildah/stable
  variables:
    # Documentation:
    # - https://docs.gitlab.com/ci/docker/using_kaniko/
    # - https://docs.gitlab.com/ci/docker/using_docker_build/#buildah-example
    STORAGE_DRIVER: vfs
    BUILDAH_FORMAT: docker
    FQ_IMAGE_NAME: "$CI_REGISTRY_IMAGE/test"

    # Docker
    REPO_PREFIX: registry.ci.alytvynenko.net/1-general/microservices-demo
    TAG: latest
  before_script:
    # FIXME: enable TLS later
    - echo "$CI_REGISTRY_PASSWORD" | buildah login --tls-verify=false -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script: |
    # FIXME: algorithmically bad, fix later
    for svc in adservice cartservice checkoutservice currencyservice emailservice loadgenerator paymentservice productcatalogservice recommendationservice shippingservice;
    do
      buildah pull us-central1-docker.pkg.dev/google-samples/microservices-demo/$svc:v0.10.2
      buildah tag us-central1-docker.pkg.dev/google-samples/microservices-demo/$svc:v0.10.2 registry.ci.alytvynenko.net/1-general/microservices-demo/$svc:v0.10.2
      buildah push --tls-verify=false registry.ci.alytvynenko.net/1-general/microservices-demo/$svc:v0.10.2
    done

    chmod +x ./ci-build-docker-images.sh
    ./ci-build-docker-images.sh


# ==================================
#            3-TEST
# ==================================
# 1-terraform-test:
#   when: manual # FIXME: enable later
#   stage: 3-test
#   script:
#     - echo "No implementation. Skipped."

# 2-helm-test:
#   when: manual # FIXME: enable later
#   stage: 3-test
#   script: |
#     - echo "No implementation. Skipped."

3-kustomize-test:
  stage: 3-test
  script: |
    cd kustomize/tests
    KUSTOMIZE_TESTS_SUBFOLDERS=$(ls -d */)
    for test in $KUSTOMIZE_TESTS_SUBFOLDERS;
    do
        echo "## kustomize build for " + $test
        kustomize build $test
    done


# ==================================
#            4-DEPLOY
# ==================================
deploy:
  stage: 4-deploy
  variables:
    KUBE_CONTEXT: 1-general/microservices-demo:cicd-deployment
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script: |
    # FIXME: algorithmically bad, fix later
    for svc in adservice cartservice checkoutservice currencyservice emailservice loadgenerator paymentservice productcatalogservice recommendationservice shippingservice;
    do
      kubectl apply -f ./kubernetes-manifests/$svc.yaml
    done

    kubectl delete -f ./kubernetes-manifests/frontend.yaml || true
    kubectl apply -f ./kubernetes-manifests/frontend.yaml

destroy:
  stage: 5-emergency-only
  when: manual
  variables:
    KUBE_CONTEXT: 1-general/microservices-demo:cicd-deployment
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script: |
    for svc in adservice cartservice checkoutservice currencyservice emailservice loadgenerator paymentservice productcatalogservice recommendationservice shippingservice;
    do
      kubectl delete -f ./kubernetes-manifests/$svc.yaml
    done


# ==================================
#           0-END-MEASURE
# ==================================
on_success:
  stage: 0-end-measure
  when: on_success
  script: |
    source ./dynamic-global-variables.sh
    export END_TIME=$(date +%s)
    export DELTA_TIME=$(echo "$END_TIME - $START_TIME" | bc)

    echo END_TIME=$END_TIME
    echo DELTA_TIME=$DELTA_TIME

    curl -XPOST "$INFLUXDB_URL/api/v2/write?org=$INFLUXDB_ORG&bucket=$INFLUXDB_BUCKET&precision=s" \
      --header "Authorization: Token $INFLUXDB_TOKEN" \
      --data-raw "gitlab_pipelines,job=$CI_PROJECT_NAME status=0,duration=$DELTA_TIME $(date +%s)"

on_failure:
  stage: 0-end-measure
  when: on_failure
  script: |
    source ./dynamic-global-variables.sh
    export END_TIME=$(date +%s)
    export DELTA_TIME=$(echo "$END_TIME - $START_TIME" | bc)

    echo END_TIME=$END_TIME
    echo DELTA_TIME=$DELTA_TIME

    curl -XPOST "$INFLUXDB_URL/api/v2/write?org=$INFLUXDB_ORG&bucket=$INFLUXDB_BUCKET&precision=s" \
      --header "Authorization: Token $INFLUXDB_TOKEN" \
      --data-raw "gitlab_pipelines,job=$CI_PROJECT_NAME status=1,duration=$DELTA_TIME $(date +%s)"

